package main

import (
	"fmt"
	"log"
	"os"
	"time"
)

type event struct{}
type arrow byte

var (
	a         [][]rune
	kick      = make(chan event)
	direction = make(chan arrow)
	logger    *log.Logger
	interMap  = map[string](chan event){
		"up":    make(chan event),
		"down":  make(chan event),
		"left":  make(chan event),
		"right": make(chan event),
		"pause": make(chan event),
	}
)

func main() {
	logFile, _ := os.Create("log.txt")
	defer logFile.Close()
	logger = log.New(logFile, "ex: ", log.LstdFlags|log.Lshortfile)

	go func() {
		for range kick {
			draw()
		}
	}()
	for {
		logger.Println("New round")
		spark()
	}

}

func run() {
	for {
		d <- direction
		switch d {
		case value1:
			interMap["up"] <- event{}
		case value:
			interMap["down"] <- event{}
		default:
			interMap["pause"] <- event{}

		}
	}

}

func move() {
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(a[i]); j++ {
			a[i][j] ^= ' '
			kick <- event{}
			logger.Println("changing", i, j)
			a[i][j] ^= ' '
		}

	}

}

func draw() {
	print("\033[H\033[2J")
	fmt.Printf("%2c- ", ' ')
	for i := 0; i < len(a[0]); i++ {
		fmt.Printf("%3d", i+1)
	}
	for i := 0; i < len(a); i++ {
		fmt.Println()
		fmt.Printf("%2d: ", i+1)
		for j := 0; j < len(a[i]); j++ {
			fmt.Printf("%3c", a[i][j])
		}
	}
	time.Sleep(75 * time.Millisecond)
}

func init() {
	go func() {
		var a = make([]byte, 1)
		for {
			os.Stdin.Read(make([]byte, 1))
			direction <- arrow(a[0])
		}
	}()

	for i := 0; i < 35; i++ {
		var row []rune
		for i := 0; i < 35; i++ {
			row = append(row, 'x')
		}
		a = append(a, row)
	}
}
